// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/SteveH1UK/gorunning/mongodb (interfaces: AthleteDAOInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	gorunning "github.com/SteveH1UK/gorunning"
	mongodb "github.com/SteveH1UK/gorunning/mongodb"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAthleteDAOInterface is a mock of AthleteDAOInterface interface
type MockAthleteDAOInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAthleteDAOInterfaceMockRecorder
}

// MockAthleteDAOInterfaceMockRecorder is the mock recorder for MockAthleteDAOInterface
type MockAthleteDAOInterfaceMockRecorder struct {
	mock *MockAthleteDAOInterface
}

// NewMockAthleteDAOInterface creates a new mock instance
func NewMockAthleteDAOInterface(ctrl *gomock.Controller) *MockAthleteDAOInterface {
	mock := &MockAthleteDAOInterface{ctrl: ctrl}
	mock.recorder = &MockAthleteDAOInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAthleteDAOInterface) EXPECT() *MockAthleteDAOInterfaceMockRecorder {
	return m.recorder
}

// CreateAthelete mocks base method
func (m *MockAthleteDAOInterface) CreateAthelete(arg0 *gorunning.NewAthelete) error {
	ret := m.ctrl.Call(m, "CreateAthelete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAthelete indicates an expected call of CreateAthelete
func (mr *MockAthleteDAOInterfaceMockRecorder) CreateAthelete(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAthelete", reflect.TypeOf((*MockAthleteDAOInterface)(nil).CreateAthelete), arg0)
}

// EditAthelete mocks base method
func (m *MockAthleteDAOInterface) EditAthelete(arg0 string, arg1 *gorunning.NewAthelete) error {
	ret := m.ctrl.Call(m, "EditAthelete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditAthelete indicates an expected call of EditAthelete
func (mr *MockAthleteDAOInterfaceMockRecorder) EditAthelete(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditAthelete", reflect.TypeOf((*MockAthleteDAOInterface)(nil).EditAthelete), arg0, arg1)
}

// FindAllAtheletes mocks base method
func (m *MockAthleteDAOInterface) FindAllAtheletes() ([]mongodb.AtheleteModel, error) {
	ret := m.ctrl.Call(m, "FindAllAtheletes")
	ret0, _ := ret[0].([]mongodb.AtheleteModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllAtheletes indicates an expected call of FindAllAtheletes
func (mr *MockAthleteDAOInterfaceMockRecorder) FindAllAtheletes() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllAtheletes", reflect.TypeOf((*MockAthleteDAOInterface)(nil).FindAllAtheletes))
}

// FindAtheleteByFriendlyName mocks base method
func (m *MockAthleteDAOInterface) FindAtheleteByFriendlyName(arg0 string) (mongodb.AtheleteModel, error) {
	ret := m.ctrl.Call(m, "FindAtheleteByFriendlyName", arg0)
	ret0, _ := ret[0].(mongodb.AtheleteModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAtheleteByFriendlyName indicates an expected call of FindAtheleteByFriendlyName
func (mr *MockAthleteDAOInterfaceMockRecorder) FindAtheleteByFriendlyName(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAtheleteByFriendlyName", reflect.TypeOf((*MockAthleteDAOInterface)(nil).FindAtheleteByFriendlyName), arg0)
}
